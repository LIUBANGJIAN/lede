#
# This is free software, lisence use MIT.........................
#
# Copyright (C) 2019 P3TERX <https://p3terx.com>
# Copyright (C) 2019 KFERMercer <KFER.Mercer@gmail.com>
#
# <https://github.com/KFERMercer/OpenWrt-CI>
#

name: OpenWrt_open-vm-tools_6.12.x

on:
  push:
    branches:
      - master
  schedule:
      - cron:  '0 */3 * * *'
  release:
      types: [published]

jobs:

  build:

    runs-on: ubuntu-22.04

    steps:

      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: master

      - name: 查看机器配置
        run: |
         echo "警告⚠"
         echo "分配的服务器性能有限，若选择的插件过多，务必注意CPU性能！"
         echo -e "CPU性能排序: 7763 > 8370C > 8272CL > 8171M > E5-2673\n"
         echo "--------------------------CPU信息--------------------------"
         echo "CPU物理数量: $(cat /proc/cpuinfo | grep "physical id" | sort | uniq | wc -l)"
         echo "CPU核心数量: $(nproc)"
         echo -e "CPU型号信息:$(cat /proc/cpuinfo | grep -m1 name | awk -F: '{print $2}')\n"
         echo "--------------------------内存信息--------------------------"
         echo "已安装内存详细信息:"
         echo -e "$(sudo lshw -short -C memory | grep GiB)\n"
         echo "--------------------------硬盘信息--------------------------"
         echo "硬盘数量: $(ls /dev/sd* | grep -v [1-9] | wc -l)" && df -hT

      - name: Space cleanup
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi `docker images -q`
          sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d /usr/local/lib/android
          ######sudo -E apt-get -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* adoptopenjdk* mysql* php* mongodb* dotnet*  snapd* || true
          sudo -E apt-mark hold grub-efi-amd64-signed
          sudo -E apt-get update
          sudo -E apt -y purge azure-cli* docker* ghc* zulu* llvm* firefox google* dotnet* powershell* openjdk* mysql* php* mongodb* dotnet* snap*
          sudo -E apt -y full-upgrade
          #####sudo -E apt-get -y install ack antlr3 aria2 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python3 python3-pip libpython3-dev qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev libfuse-dev
          sudo -E apt -y install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache clang cmake cpio curl device-tree-compiler flex gawk gcc-multilib g++-multilib gettext genisoimage git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev libssl-dev libtool llvm lrzsz msmtp ninja-build p7zip p7zip-full patch pkgconf python3 python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean
          sudo -E timedatectl set-timezone "Asia/Shanghai"
          #sudo bash <(curl -qfsSL "https://raw.githubusercontent.com/Azathothas/Arsenal/main/misc/Github/Runners/Ubuntu/debloat.sh")

      - name: Maximize build space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 512
          swap-size-mb: 1024
          remove-dotnet: 'true'

      - name: Checkout
        uses: actions/checkout@v4

      - name: Build
        run: |
          echo "Free space:"
          df -h
          date

      - name: other package
        run: |
          cd package
          # mkdir openwrt-package
          # cd openwrt-package
          cd lean
          #####git clone https://github.com/LIUBANGJIAN/openwrt_wg_wormhole
          # git clone https://github.com/vernesong/OpenClash.git
          # git clone https://github.com/rufengsuixing/luci-app-adguardhome.git
          # git clone https://github.com/srchack/custom-packages.git && mv custom-packages/open-vm-tools package && rm -rf custom-packages
          # git clone https://github.com/fw876/helloworld.git
          # git clone https://github.com/siropboy/sirpdboy-package package/sirpdboy-package
          # git clone https://github.com/tvheadend/tvheadend.git
          # git clone https://github.com/xiaorouji/openwrt-passwall.git
          # git clone https://github.com/messense/aliyundrive-webdav.git
          # git clone https://github.com/lollipopkit/server_box_monitor.git
          # ##git clone https://github.com/vmware/open-vm-tools.git
          ####git clone https://github.com/vernesong/OpenClash.git
          # git clone https://github.com/sbwml/luci-app-alist
          #sudo rm -rf feeds/packages/lang/golang
          #git clone https://github.com/kenzok8/golang feeds/packages/lang/golang
          # sudo mkdir -p -m 777 /mnt/openwrt/bin /mnt/openwrt/build_dir/host /mnt/openwrt/build_dir/hostpkg /mnt/openwrt/dl /mnt/openwrt/feeds /mnt/openwrt/staging_dir
          # ln -s /mnt/openwrt/bin ./bin
          # mkdir -p ./build_dir/host && ln -s /mnt/openwrt/build_dir/host ./build_dir/host
          # mkdir -p ./build_dir/host && ln -s /mnt/openwrt/build_dir/hostpkg ./build_dir/hostpkg
          # ln -s /mnt/openwrt/dl ./dl
          # ln -s /mnt/openwrt/feeds ./feeds
          # ln -s /mnt/openwrt/staging_dir ./staging_dir
          df -h
          ls -sh

      - name: Update feeds
        run: |
          #####sed -i '1i src-git kenzo https://github.com/kenzok8/openwrt-packages' feeds.conf.default
          sed -i '1i src-git lucky https://github.com/gdy666/luci-app-lucky' feeds.conf.default
          sed -i '2i src-git small https://github.com/kenzok8/small' feeds.conf.default
          #####sed -i '2i src-git passwall https://github.com/xiaorouji/openwrt-passwall' feeds.conf.default
          #######sed -i '3i src-git alist https://github.com/sbwml/luci-app-alist' feeds.conf.default
          sed -i '3i src-git openlist2 https://github.com/sbwml/luci-app-openlist2' feeds.conf.default
          sed -i '4i src-git vmware https://github.com/vmware/open-vm-tools' feeds.conf.default
          sed -i '5i src-git taskplan https://github.com/sirpdboy/luci-app-taskplan' feeds.conf.default
          ####sed -i '5i src-git wg_wormhole https://github.com/LIUBANGJIAN/openwrt_wg_wormhole' feeds.conf.default
          ###########sed -i '6i src-git passwall https://github.com/xiaorouji/openwrt-passwall.git' feeds.conf.default
          ###########sed -i '7i src-git passwall_packages https://github.com/xiaorouji/openwrt-passwall-packages.git' feeds.conf.default
          ./scripts/feeds update -a 
          rm -rf feeds/luci/applications/luci-app-mosdns
          rm -rf feeds/packages/net/{alist,openlist,adguardhome,mosdns,xray*,v2ray*,v2ray*,sing*,smartdns}
          rm -rf feeds/packages/utils/v2dat
          ##rm -rf feeds/packages/lang/golang
          ##git clone https://github.com/kenzok8/golang feeds/packages/lang/golang
          ####git clone https://github.com/kenzok8/golang -b 1.22 feeds/packages/lang/golang
          ./scripts/feeds update -a
          ./scripts/feeds install -a
          cat ./feeds.conf.default

      - name: Generate configuration file
        run: |
          rm -f ./.config*
          touch ./.config
          #
          # ========================固件定制部分========================
          #
          #
          # 如果 不对本区块做出任何编辑, 则生成默认配置固件.
          #
          # 以下为定制化固件选项和说明:
          #
          #
          # 有些插件/选项是默认开启的, 如果想要关闭, 请参照以下示例进行编写:
          #
          #          =========================================
          #         |  # 取消编译VMware镜像:                   |
          #         |  cat >> .config <<EOF                   |
          #         |  # CONFIG_VMDK_IMAGES is not set        |
          #         |  EOF                                    |
          #          =========================================
          #
          #
          # 以下是一些提前准备好的一些插件选项.
          # 直接取消注释相应代码块即可应用. 不要取消注释代码块上的汉字说明.
          # 如果不需要代码块里的某一项配置, 只需要删除相应行.
          #
          # 如果需要其他插件, 请按照示例自行添加.
          # 注意, 只需添加依赖链顶端的包. 如果你需要插件 A, 同时 A 依赖 B, 即只需要添加 A.
          #
          # 无论你想要对固件进行怎样的定制, 都需要且只需要修改 EOF 回环内的内容.
          #
          # 编译x64固件:
          cat >> .config <<EOF
          CONFIG_TARGET_x86=y
          CONFIG_TARGET_x86_64=y
          CONFIG_TARGET_x86_64_Generic=y
          #CONFIG_HAS_TESTING_KERNEL=y
          CONFIG_TESTING_KERNEL=n
          #CONFIG_LINUX_6_6=y
          EOF
          # 镜像设置:
          # cat >> .config <<EOF
          # CONFIG_TARGET_ROOTFS_PARTSIZE=256
          # EOF
          # 固件压缩:
          # cat >> .config <<EOF
          # CONFIG_TARGET_IMAGES_GZIP=y
          # EOF
          # 编译UEFI固件:
          # cat >> .config <<EOF
          # CONFIG_EFI_IMAGES=y
          # EOF
          # IPv6支持:
          # cat >> .config <<EOF
          # CONFIG_PACKAGE_dnsmasq_full_dhcpv6=y
          # CONFIG_PACKAGE_ipv6helper=y
          # EOF
          # 多文件系统支持:
          # cat >> .config <<EOF
          # CONFIG_PACKAGE_kmod-fs-nfs=y
          # CONFIG_PACKAGE_kmod-fs-nfs-common=y
          # CONFIG_PACKAGE_kmod-fs-nfs-v3=y
          # CONFIG_PACKAGE_kmod-fs-nfs-v4=y
          # CONFIG_PACKAGE_kmod-fs-ntfs=n
          # CONFIG_PACKAGE_kmod-fs-squashfs=n
          # CONFIG_PACKAGE_kmod-fs-ntfs3-oot=y
          # EOF
          # USB3.0支持:
          # cat >> .config <<EOF
          # CONFIG_PACKAGE_kmod-usb-ohci=y
          # CONFIG_PACKAGE_kmod-usb-ohci-pci=y
          # CONFIG_PACKAGE_kmod-usb2=y
          # CONFIG_PACKAGE_kmod-usb2-pci=y
          # CONFIG_PACKAGE_kmod-usb3=y
          # EOF
          # 常用LuCI插件选择:
          cat >> .config <<EOF
          # CONFIG_PACKAGE_luci-app-adbyby-plus=y
          # CONFIG_PACKAGE_luci-app-aria2=y
          # CONFIG_PACKAGE_luci-app-baidupcs-web=y
          # CONFIG_PACKAGE_luci-app-docker=y
          # CONFIG_PACKAGE_luci-app-kodexplorer=y
          # CONFIG_PACKAGE_luci-app-minidlna=y
          # CONFIG_PACKAGE_luci-app-openvpn=y
          # CONFIG_PACKAGE_luci-app-openvpn-server=y
          # CONFIG_PACKAGE_luci-app-qbittorrent=y
          # CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Kcptun=y
          # CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Shadowsocks=y
          # CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_ShadowsocksR_Server=y
          # CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_ShadowsocksR_Socks=y
          # CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_V2ray=y
          # CONFIG_PACKAGE_luci-app-ttyd=y
          # CONFIG_PACKAGE_luci-app-v2ray-server=y
          # CONFIG_PACKAGE_luci-app-verysync=y
          # CONFIG_PACKAGE_luci-app-webadmin=y
          # CONFIG_PACKAGE_luci-app-wireguard=y
          # CONFIG_PACKAGE_luci-app-wrtbwmon=y
          # CONFIG_PACKAGE_luci-app-koolproxyR=y
          # CONFIG_PACKAGE_luci-app-adguardhome=y
          # CONFIG_PACKAGE_luci-app-netdata=y
          # CONFIG_PACKAGE_luci-app-frpc=y
          # CONFIG_PACKAGE_luci-app-openclash=n
          # CONFIG_PACKAGE_luci-app-mihomo=y
          # CONFIG_PACKAGE_luci-app-frps=y
          CONFIG_PACKAGE_luci-app-aliyundrive-webdav=n
          CONFIG_PACKAGE_luci-app-adbyby-plus=n
          CONFIG_PACKAGE_luci-app-unblockmusic=n
          CONFIG_PACKAGE_luci-app_transmission=n
          CONFIG_PACKAGE_luci-app-xlnetacc=n
          CONFIG_PACKAGE_luci-app-samba4=n
          CONFIG_PACKAGE_luci-app-ddns=n
          CONFIG_PACKAGE_luci-app-vsftpd=n
          CONFIG_PACKAGE_luci-app-accesscontrol=n
          CONFIG_PACKAGE_luci-app-ssr-plus=n
          CONFIG_PACKAGE_luci-app-vlmcsd=n
          CONFIG_PACKAGE_luci-app-openlist2=y
          CONFIG_PACKAGE_luci-app-lucky=y
          CONFIG_PACKAGE_luci-app-passwall=y
          ####CONFIG_PACKAGE_luci-app-passwall2=y
          CONFIG_PACKAGE_luci-app-wireguard=y
          CONFIG_PACKAGE_luci-proto-wireguard=y
          CONFIG_PACKAGE_luci-app-ttyd=y
          CONFIG_PACKAGE_luci-app-taskplan=y
          EOF
          # LuCI主题:
          # #cat >> .config <<EOF
          # #CONFIG_PACKAGE_luci-theme-argon=y
          # #CONFIG_PACKAGE_luci-theme-netgear=y
          # #EOF
          # 常用软件包:
          cat >> .config <<EOF
          # CONFIG_PACKAGE_curl=y
          # CONFIG_PACKAGE_htop=y
          # CONFIG_PACKAGE_screen=y
          # CONFIG_PACKAGE_tree=y
          # CONFIG_PACKAGE_vim-fuller=y
          # CONFIG_PACKAGE_wget=y
          # CONFIG_PACKAGE_tvheadend=y
          # CONFIG_PACKAGE_ntfs3-oot=n
          # CONFIG_PACKAGE_mount=n
          # CONFIG_PACKAGE_server_box_monitor=y
          CONFIG_SING_BOX_WITH_ECH=n
          CONFIG_PACKAGE_nano=y
          CONFIG_PACKAGE_open-vm-tools=y
          CONFIG_PACKAGE_iperf3=y
          CONFIG_PACKAGE_iftop=y
          CONFIG_PACKAGE_tcpdump=y
          CONFIG_PACKAGE_pv=y
          #CONFIG_PACKAGE_wg-installer-server-hotplug-babeld=y
          #CONFIG_PACKAGE_wg-installer-client=y
          #CONFIG_PACKAGE_wg-installer-server=y
          ####CONFIG_PACKAGE_wg_wormhole=y
          EOF
          # 取消编译VMware镜像以及镜像填充 (不要删除被缩进的注释符号):
          cat >> .config <<EOF
          # CONFIG_TARGET_IMAGES_GZIP is not set
          # CONFIG_TARGET_IMAGES_KERNEL is not set
          # CONFIG_VMDK_IMAGES is not set
          # CONFIG_TARGET_ROOTFS_INITRAMFS is not set
          ## CONFIG_TARGET_ROOTFS_SQUASHFS is not set
          EOF
          #
          # ========================固件定制部分结束========================
          #
          sed -i 's/^[ \t]*//g' ./.config
          make defconfig

      - name: Make download
        run: |
          make download -j8
          find ./dl/ -size -1024c -exec rm -f {} \;
          df -h

      - name: Compile the firmware
        run: |
          make -j$(nproc) || make -j16 V=s
          echo "======================="
          echo "Space usage:"
          echo "======================="
          df -h
          echo "======================="
          du -h --max-depth=1 ./ --exclude=build_dir --exclude=bin
          du -h --max-depth=1 ./build_dir
          du -h --max-depth=1 ./bin
        
      - name: Prepare artifact
        run: |
          mkdir -p ./artifact/firmware
          mkdir -p ./artifact/package
          mkdir -p ./artifact/buildinfo
          rm -rf $(find ./bin/targets/ -type f -name "openwrt-x86-64-generic-kernel.bin")
          rm -rf $(find ./bin/targets/ -type f -name "openwrt-x86-64-generic-squashfs-rootfs.img")
          rm -rf $(find ./bin/targets/ -type d -name "packages")
          cp -rf $(find ./bin/targets/ -type f) ./artifact/firmware/
          cp -rf $(find ./bin/packages/ -type f -name "*.ipk") ./artifact/package/
          cp -rf $(find ./bin/targets/ -type f -name "*.buildinfo" -o -name "*.manifest") ./artifact/buildinfo/

      - name: Deliver buildinfo
        uses: actions/upload-artifact@v4
        with:
          name: OpenWrt_buildinfo_6.12.x
          path: ./artifact/buildinfo/
          retention-days: 7
          compression-level: 9

      - name: Deliver package
        uses: actions/upload-artifact@v4
        with:
          name: OpenWrt_package_6.12.x
          path: ./artifact/package/
          retention-days: 7
          compression-level: 9

      - name: Deliver firmware
        uses: actions/upload-artifact@v4
        with:
          name: OpenWrt_firmware_6.12.x
          path: ./bin/targets/
          retention-days: 7
          compression-level: 9

      - name: Upload release asset
        if: github.event == 'release'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.YOURTOKEN }}
          file: ./artifact/firmware/*
          tag: ${{ github.ref }}
          file_glob: true

      #- name: Upload firmware packages to wss
      #  run: |
      #    curl -sL https://git.io/file-transfer | sh
      #    result=$(curl -s http://quan.suning.com/getSysTime.do)
      #    datetime=${result:13:10}_${result:24:8}
      #    zip -r -y -q -9 openwrt-firmware_$datetime.zip ./artifact/
      #    # zip -r -y openwrt-package_$datetime.zip ./artifact/package/
      #    # zip -r -y openwrt-buildinfo_$datetime.zip ./artifact/buildinfo/
      #    # ./transfer cow --no-progress ./*.zip
      #    ./transfer wss --no-progress ./*.zip
